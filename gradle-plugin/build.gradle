/*
 * Copyright (C) 2020 Dremio
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'java-gradle-plugin'
  id 'maven-publish'
  id 'com.gradle.plugin-publish' version '1.2.0'
  id "com.diffplug.spotless" version "6.20.0"
}

if (project.hasProperty("code-coverage")) {
  plugins.apply('jacoco')
}

def mavenPropertiesFile = file('../target/project.properties')
if (!mavenPropertiesFile.exists() || mavenPropertiesFile.lastModified() < file("../pom.xml").lastModified()) {
  exec {
    commandLine = ['../mvnw', 'properties:write-project-properties', '-Pall-properties', '-q', '-f', '../pom.xml']
    environment('JAVA_HOME', System.properties['java.home'])
  }.assertNormalExitValue()
}
def mavenProperties = new Properties()
mavenProperties.load(new StringReader(mavenPropertiesFile.text))

def assertjVersion = mavenProperties.get('assertj.version')
def jacksonVersion = mavenProperties.get('jackson.version')
def jacocoVersion = mavenProperties.get('jacoco.version')
def junitVersion = mavenProperties.get('junit.version')

group = "org.projectnessie.nessie-runner"
version = mavenProperties.get('nessierunner.version')

repositories {
  mavenCentral()
  mavenLocal()
}

spotless {
  java {
    googleJavaFormat()
    licenseHeaderFile(file("../codestyle/copyright-header-java.txt"))
  }
}

gradlePlugin {
  plugins {
    simplePlugin {
      id = 'org.projectnessie'
      implementationClass = 'org.projectnessie.nessierunner.gradle.NessieRunnerPlugin'
      displayName = 'Nessie Runner'
      description = 'Start and stop a Nessie server for integration testing'
      tags.addAll(['test', 'integration', 'quarkus'])
    }
  }
  website.set('https://projectnessie.org')
  vcsUrl.set('https://github.com/projectnessie/nessie')
}

repositories {
  mavenCentral()
  if (version.endsWith("-SNAPSHOT")) {
    mavenLocal()
  }
}

compileJava {
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
}

test {
  systemProperties([
          'nessie-version': version,
          'junit-version': junitVersion,
          'jackson-version': jacksonVersion
  ])
  jvmArgs("--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
          "--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
          "--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED",
          "--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED",
          "--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
          "--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
          "--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
          "--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
          "--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
          "--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED",
          "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED",
          "--add-opens=java.base/java.util=ALL-UNNAMED")
  useJUnitPlatform()
}

javadoc {
  options.addStringOption("Xdoclint:-reference", "-quiet")
}

dependencies {
  implementation "org.projectnessie.nessie-runner:nessie-runner-common:${project.version}"

  testImplementation gradleTestKit()
  testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
  testImplementation("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
  testImplementation("org.assertj:assertj-core:${assertjVersion}")
}

if (project.hasProperty("code-coverage")) {
  jacoco {
    toolVersion = jacocoVersion
  }
}

task codeCoverageReport(type:JacocoReport) {
  executionData test
  sourceSets sourceSets.main

  reports {
    html.required = true
    xml.required = true
    csv.required = true
  }
}

check {
  dependsOn codeCoverageReport
}

publishing {
  publications {
    maven(MavenPublication) {
      groupId = 'org.projectnessie.nessie-runner'
      artifactId = 'nessie-runner-gradle-plugin'
      version = version

      from components.java
    }
  }
}
